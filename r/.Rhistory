}
}
package.skeleton(list = ls(), name = "shoRcut")
require(devtools)
install_github('shoRcut', 'jbkunst')
install_github('shoRcut', 'jbkunst')
install_github('shoRcut', 'jbkunst')
library(shoRcut)
shoRcut::
library(rgefx)
library(devtools)
install_github("shoRcut", "jbkunst")
library(rgexf)
library(devtools)
install_github("shoRcut", "jbkunst")
library(shoRcut)
library(devtools)
library(shoRcut)
library(devtools)
install_github("shoRcut", "jbkunst")
library(shoRcut)
shoRcut::readtable
ftable(sample(c(letters), size = 100, replace=TRUE)))
ftable(sample(c(letters), size = 100, replace=TRUE))))
ftable(sample(c(letters), size = 100, replace=TRUE))
ftable(sample(c(letters), size = 10000, replace=TRUE))
ftable(Titanic, row.vars = 1:3)
ftable(Titanic, row.vars = 1:2, col.vars = "Survived")
ftable(Titanic, row.vars = 2:1, col.vars = "Survived")
x <- ftable(mtcars[c("cyl", "vs", "am", "gear")])
x
ftable(x, row.vars = c(2, 4))
variable <- sample(letters, size = 100, prob= sample(1:length(letters)), replace=TRUE)
variable
variable <- sample(letters, size = 1000, prob= sample(1:length(letters)), replace=TRUE)
variable <- as.factor(variable)
variable
if(any(is.na(variable))) factor <- addNA(variable)
Counts <- as.vector(table(variable))
Counts
counts <- as.vector(table(variable))
variable <- sample(letters, size = 1000, prob= sample(1:length(letters)), replace=TRUE)
variable <- as.factor(variable)
if(any(is.na(variable))) factor <- addNA(variable)
freq <- as.vector(table(variable))
table <- data.frame(variable = levels(variable),
freq,
cumfreq = cumsum(freq),
percents = prop.table(freq))
table
variable <- sample(letters, size = 1000, prob= sample(1:length(letters)), replace=TRUE)
variable <- as.factor(variable)
if(any(is.na(variable))) factor <- addNA(variable)
freq <- as.vector(table(variable))
table <- data.frame(variable = levels(variable),
freq,
cumfreq = cumsum(freq),
relfreq = prop.table(freq))
if(sort.by.count) table <- table[order(table$freq, decreasing=T),]
table$cumrelfreq <- cumsum(table$relfreq)
table
table <- cbind(table, c("Total", sum(table$freq), NA, 1, NA))
table <- rbind(table, c("Total", sum(table$freq), NA, 1, NA))
table
variable <- sample(c(letters,NA), size = 1000, prob= sample(1:length(letters)+1), replace=TRUE)
variable <- sample(c(letters,NA), size = 1000, prob= sample(1:length(letters)+1), replace=TRUE)
variable <- as.factor(variable)
any(is.na(variable))
variable <- sample(c(letters,NA), size = 1000, prob= sample(1:length(letters)+1), replace=TRUE)
variable <- as.factor(variable)
any(is.na(variable))
c(letters,NA)
variable <- sample(c(letters,NA), size = 1000, prob= sample(1:(length(letters)+1), replace=TRUE)
)
variable <- sample(c(letters,NA), size = 1000, prob= sample(1:(length(letters)+1)), replace=TRUE)
variable <- as.factor(variable)
variable
any(is.na(variable))
if(any(is.na(variable))) variable <- addNA(variable)
variable
variable <- sample(c(letters,NA), size = 1000, prob= sample(1:(length(letters)+1)), replace=TRUE)
variable
as.vector(table(variable, useNA=TRUE))
table(variable, useNA=TRUE)
as.vector(table(variable, useNA="yes"))
as.vector(table(variable, useNA="always"))
levels(variable)
table(variable, useNA="always")
variable <- sample(c(letters,NA), size = 1000, prob= sample(1:(length(letters)+1)), replace=TRUE)
freq <- table(variable, useNA="always")
variable <- sample(c(letters,NA), size = 1000, prob= sample(1:(length(letters)+1)), replace=TRUE)
freq <- table(variable, useNA="always")
freq
names(freq)
as.vector(freq)
prop.table(freq)
cumsum(freq)
table <- data.frame(variable = names(freq),
freq = freq,
cumfreq = cumsum(freq),
relfreq = prop.table(freq))
names(freq)
freq
addNA(freq)
freq <- table(variable, useNA="always")
freq <- addNA(freq)
table <- data.frame(variable = names(freq),
freq = freq,
cumfreq = cumsum(freq),
relfreq = prop.table(freq))
cumsum(freq)
variable <- sample(c(letters,NA), size = 1000, prob= sample(1:(length(letters)+1)), replace=TRUE)
freq <- table(variable, useNA="always")
names(freq)
freq
cumsum(freq)
prop.table(freq)
table <- data.frame(variable = names(freq),
freq = freq,
cumfreq = cumsum(freq),
relfreq = prop.table(freq))
data.frame
table <- data.frame(variable = names(freq),
freq = freq,
cumfreq = cumsum(freq),
relfreq = prop.table(freq), row.names = NULL)
table
freq
variable <- sample(c(letters,NA), size = 1000, prob= sample(1:(length(letters)+1)), replace=TRUE)
freq <- table(variable, useNA="always")
table <- data.frame(variable = names(freq),
freq = as.vector(freq),
cumfreq = cumsum(freq),
relfreq = as.vector(prop.table(freq)), row.names = NULL)
table
table <- table[order(table$freq, decreasing=T),]
table
table$cumrelfreq <- cumsum(table$relfreq)
table
table <- rbind(table, c("Total", sum(table$freq), NA, 1, NA))
variable <- sample(c(letters,NA), size = 1000, prob= sample(1:(length(letters)+1)), replace=TRUE)
freq <- table(variable, useNA="always")
table <- data.frame(variable = names(freq),
freq = as.vector(freq),
cumfreq = cumsum(freq),
relfreq = as.vector(prop.table(freq)),
row.names = NULL)
table$cumrelfreq <- cumsum(table$relfreq)
str(table)
freq <- table(variable, useNA="always")
table <- data.frame(variable = names(freq),
freq = as.vector(freq),
cumfreq = cumsum(freq),
relfreq = as.vector(prop.table(freq)),
row.names = NULL,
stringsAsFactors = FALSE)
table$cumrelfreq <- cumsum(table$relfreq)
table <- rbind(table, c("Total", sum(table$freq), NA, 1, NA))
table
library(scales)
table$freq <- prettyNum(table$freq, big.mark=",")
table$cumfreq <- prettyNum(table$cumfreq, big.mark=",")
table <- data.frame(variable = names(freq),
freq = as.vector(freq),
cumfreq = cumsum(freq),
relfreq = as.vector(prop.table(freq)),
row.names = NULL,
stringsAsFactors = FALSE)
if(sort.by.count){
table <- table[order(table$freq, decreasing=T),]
}
table$cumrelfreq <- cumsum(table$relfreq)
table$freq <- prettyNum(table$freq, big.mark=",")
table$cumfreq <- prettyNum(table$cumfreq, big.mark=",")
table$relfreq <- percent(result$relfreq)
table$cumrelfreq <- percent(result$cumrelfreq)
table$freq <- prettyNum(table$freq, big.mark=",")
table$cumfreq <- prettyNum(table$cumfreq, big.mark=",")
table$relfreq <- percent(result$relfreq)
table$cumrelfreq <- percent(result$cumrelfreq)
table$relfreq <- percent(table$relfreq)
table$cumrelfreq <- percent(table$cumrelfreq)
return(table)
table
variable <- sample(c(letters,NA), size = 1234, prob= sample(1:(length(letters)+1)), replace=TRUE)
freq <- table(variable, useNA="always")
table <- data.frame(variable = names(freq),
freq = as.vector(freq),
cumfreq = cumsum(freq),
relfreq = as.vector(prop.table(freq)),
row.names = NULL,
stringsAsFactors = FALSE)
if(sort.by.count){
table <- table[order(table$freq, decreasing=T),]
}
table$cumrelfreq <- cumsum(table$relfreq)
library(scales)
table$freq <- prettyNum(table$freq, big.mark=",")
table$cumfreq <- prettyNum(table$cumfreq, big.mark=",")
table$relfreq <- percent(table$relfreq)
table$cumrelfreq <- percent(table$cumrelfreq)
table
variable <- sample(c(letters,NA), size = 1234, prob= sample(1:(length(letters)+1)), replace=TRUE)
freq <- table(variable, useNA="always")
table <- data.frame(variable = names(freq),
freq = as.vector(freq),
cumfreq = cumsum(freq),
relfreq = as.vector(prop.table(freq)),
row.names = NULL,
stringsAsFactors = FALSE)
if(sort.by.count){
table <- table[order(table$freq, decreasing=T),]
}
table$cumrelfreq <- cumsum(table$relfreq)
table <- rbind(table, c("Total", sum(table$freq), NA, 1, NA))
library(scales)
table$freq <- prettyNum(table$freq, big.mark=",")
table$cumfreq <- prettyNum(table$cumfreq, big.mark=",")
table$relfreq <- percent(table$relfreq)
table$cumrelfreq <- percent(table$cumrelfreq)
table
variable <- sample(c(letters,NA), size = 1234, prob= sample(1:(length(letters)+1)), replace=TRUE)
freq <- table(variable, useNA="always")
table <- data.frame(variable = names(freq),
freq = as.vector(freq),
cumfreq = cumsum(freq),
relfreq = as.vector(prop.table(freq)),
row.names = NULL,
stringsAsFactors = FALSE)
table <- table[order(table$freq, decreasing=T),]
table
table$cumrelfreq <- cumsum(table$relfreq)
table <- rbind(table, c("Total", sum(table$freq), NA, 1, NA))
table
table$freq <- prettyNum(table$freq, big.mark=",")
table$cumfreq <- prettyNum(table$cumfreq, big.mark=",")
table$relfreq <- percent(table$relfreq)
table$relfreq
variable <- sample(c(letters,NA), size = 1234, prob= sample(1:(length(letters)+1)), replace=TRUE)
freq <- table(variable, useNA="always")
table <- data.frame(variable = names(freq),
freq = as.vector(freq),
cumfreq = cumsum(freq),
relfreq = as.vector(prop.table(freq)),
row.names = NULL,
stringsAsFactors = FALSE)
table <- table[order(table$freq, decreasing=T),]
table$cumrelfreq <- cumsum(table$relfreq)
table <- rbind(table, data.frame("Total", sum(table$freq), NA, 1, NA))
variable <- sample(c(letters,NA), size = 1234, prob= sample(1:(length(letters)+1)), replace=TRUE)
freq <- table(variable, useNA="always")
table <- data.frame(variable = names(freq),
freq = as.vector(freq),
cumfreq = cumsum(freq),
relfreq = as.vector(prop.table(freq)),
row.names = NULL,
stringsAsFactors = FALSE)
table <- table[order(table$freq, decreasing=T),]
table$cumrelfreq <- cumsum(table$relfreq)
table <- rbind(table, data.frame("Total", sum(table$freq), NA, 1, NA, stringsAsFactors=FALSE))
data.frame("Total", sum(table$freq), NA, 1, NA, stringsAsFactors=FALSE)
freq <- table(variable, useNA="always")
table <- data.frame(variable = names(freq),
freq = as.vector(freq),
cumfreq = cumsum(freq),
relfreq = as.vector(prop.table(freq)),
row.names = NULL,
stringsAsFactors = FALSE)
table <- table[order(table$freq, decreasing=T),]
table$cumrelfreq <- cumsum(table$relfreq)
d <- data.frame("Total", sum(table$freq), NA, 1, NA, stringsAsFactors=FALSE)
names(d) <- names(table)
table <- rbind(table, d)
table
library(scales)
table$freq <- prettyNum(table$freq, big.mark=",")
table$cumfreq <- prettyNum(table$cumfreq, big.mark=",")
table$relfreq <- percent(table$relfreq)
table$cumrelfreq <- percent(table$cumrelfreq)
table
freqtable <- function(variable, sort.by.count = FALSE, pretty = FALSE, add.total = TRUE){
# variable <- sample(c(letters,NA), size = 1234, prob= sample(1:(length(letters)+1)), replace=TRUE)
freq <- table(variable, useNA="always")
table <- data.frame(variable = names(freq),
freq = as.vector(freq),
cumfreq = cumsum(freq),
relfreq = as.vector(prop.table(freq)),
row.names = NULL,
stringsAsFactors = FALSE)
if(sort.by.count){
table <- table[order(table$freq, decreasing=T),]
}
table$cumrelfreq <- cumsum(table$relfreq)
if(add.total){
d <- data.frame("Total", sum(table$freq), NA, 1, NA, stringsAsFactors=FALSE)
names(d) <- names(table)
table <- rbind(table, d)
}
if(pretty){
library(scales)
table$freq <- prettyNum(table$freq, big.mark=",")
table$cumfreq <- prettyNum(table$cumfreq, big.mark=",")
table$relfreq <- percent(table$relfreq)
table$cumrelfreq <- percent(table$cumrelfreq)
}
return(table)
}
library(shoRcut)
freqtable
library(shoRcut)
freqtable(c(1,2,3,2,32,3,4,3,4,3,2,3,2))
library(shoRcut)
freqtable(c(1,2,3,2,32,3,4,3,4,3,2,3,2))
freqtable
library(shoRcut)
freqtable(c(1,2,3,2,32,3,4,3,4,3,2,3,2))
freqtable
library(shoRcut)
freqtable(c(1,2,3,2,32,3,4,3,4,3,2,3,2))
freqtable
installed.packages("PPML")
installed.packages("PMML")
install.packages("PMML")
install.packages("PPML")
install.packages("pmml")
library(pmml)
load("D:/Desarrollo/integramedica/wscbst/r/nnetmin_asistencia.RData")
pmml.nnet(nnet, model.name="Modelo NNET Asistencia", description="Modelo de asistencia generado por Foris")
load("D:/Desarrollo/integramedica/r_scripts/modelo_asistencia_nnet_5vars.RData")
pmml.nnet(mod, model.name="Modelo NNET Asistencia", description="Modelo de asistencia generado por Foris")
var <- pmml.nnet(mod, model.name="Modelo NNET Asistencia", description="Modelo de asistencia generado por Foris")
writeLines(var, con="mod_asistencia.ppml")
xmlFile <- file.path(getwd(),"cbst_foris_mod_asistencia.xml")
saveXML(var, xmlFile)
load("D:/Desarrollo/integramedica/r_scripts/modelo_captado_nnet_2vars.RData")
load("D:/Desarrollo/integramedica/r_scripts/modelo_captado_nnet_2vars.RData")
var <- pmml.nnet(mod, model.name="Modelo NNET Captacion", description="Modelo de captacion generado por Foris")
xmlFile <- file.path(getwd(),"cbst_foris_mod_captacion.xml")
saveXML(var, xmlFile)
(66-59)/59
4
runif(19)
rm(list=ls())
# install.packages("arules")
library(arules)
txn = read.transactions(file="tscs.txt", rm.duplicates= FALSE, format="single",sep=",",cols =c(1,2))
setwd("D:/Desarrollo/django-r-recommendation-system/r")
rm(list=ls())
# install.packages("arules")
library(arules)
txn = read.transactions(file="tscs.txt", rm.duplicates= FALSE, format="single",sep=",",cols =c(1,2))
basket_rules <- apriori(txn,parameter = list(sup = 0.5, conf = 0.9,target="rules"))
data(Groceries)
str(Groceries)
Groceries@data
dim(Groceries@data)
Groceries@itemInfo
gsub(" ", "_" , Groceries@itemInfo$labels)
str(Groceries@data)
str(as.matrix(Groceries@data))
prods <- gsub(" ", "_" , Groceries@itemInfo$labels)
mtx <- as.matrix(Groceries@data)
prods <- gsub(" ", "_" , Groceries@itemInfo$labels)
prods <- as.character(gsub(" ", "_" , Groceries@itemInfo$labels))
for(row in seq(nrow(mtx))){
}
row
mtx <- t(as.matrix(Groceries@data))
head(mtx)
for(row in seq(nrow(mtx))){
mtxrow
}
for(row in seq(nrow(mtx))){
}
prods[mtx[row,]]
library(plyr)
library(arules)
library(plyr)
data(Groceries)
str(Groceries)
prods <- as.character(gsub(" ", "_" , Groceries@itemInfo$labels))
dim(Groceries@data)
str(Groceries@data)
str(as.matrix(Groceries@data))
mtx <- t(as.matrix(Groceries@data))
head(mtx)
row
prods[mtx[row,]]
data.frame(id_transaction = row, prod = prods[mtx[row,]])
txn <- ldply(seq(nrow(mtx)), function(row){
data.frame(id_transaction = row, prod = prods[mtx[row,]])
}, .progress="text")
head(txn)
head(txn, 60)
prod2 <- Groceries@itemInfo$labels)
prod2 <- Groceries@itemInfo$labels
write.table(txn, file="tscs.txt", sep="\t", row.names=FALSE, col.names=FALSE)
write.table(txn, file="tscs.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote="")
write.table(txn, file="tscs.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
library(stringr)
rm(list=ls())
# install.packages("arules")
library(arules)
library(plyr)
library(stringr)
data(Groceries)
str(Groceries)
prods <- as.character(gsub(" ", "_" , str_trim(Groceries@itemInfo$labels)))
prod2 <- str_trim(Groceries@itemInfo$labels)
dim(Groceries@data)
str(Groceries@data)
str(as.matrix(Groceries@data))
mtx <- t(as.matrix(Groceries@data))
head(mtx)
txn <- ldply(seq(nrow(mtx)), function(row){
data.frame(id_transaction = row, prod = prods[mtx[row,]])
}, .progress="text")
head(txn, 60)
write.table(txn, file="tscs.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
txn <- read.transactions(file="tscs.txt", rm.duplicates= FALSE, format="single",sep="\t", cols =c(1,2))
basket_rules <- apriori(txn,parameter = list(sup = 0.5, conf = 0.9,target="rules"))
basket_rules <- apriori(txn,parameter = list(sup = 0.1, conf = 0.9,target="rules"))
txn
str(Groceries)
Groceries
txn
basket_rules <- apriori(txn,parameter = list(sup = 0.1, conf = 0.9,target="rules"))
inspect(basket_rules)
itemFrequencyPlot(txn)
txn
str(txn)
basket_rules <- apriori(txn,parameter = list(supp = 0.05, conf = 0.2,target = "rules"))
basket_rules
inspect(basket_rules)
basket_rules <- apriori(txn,parameter = list(supp = 0.005, conf = 0.02,target = "rules"))
inspect(basket_rules)
write(basket_rules)
basket_rules <- apriori(txn,parameter = list(supp = 0.05, conf = 0.2,target = "rules"))
inspect(basket_rules)
write(basket_rules)
basket_rules <- apriori(txn,parameter = list(supp = 0.05, conf = 0.1,target = "rules"))
inspect(basket_rules)
write(basket_rules)
inspect(basket_rules)
basket_rules <- apriori(txn,parameter = list(supp = 0.05, conf = 0.1, lift = 1.5, target = "rules"))
basket_rules <- apriori(txn,parameter = list(supp = 0.05, conf = 0.1, target = "rules"))
basket_rules <- apriori(txn,parameter = list(supp = 0.025, conf = 0.05, target = "rules"))
inspect(basket_rules)
rm(list=ls())
# install.packages("arules")
library(arules)
library(plyr)
library(stringr)
data(Groceries)
Groceries
str(Groceries)
prods <- as.character(gsub(" ", "_" , str_trim(Groceries@itemInfo$labels)))
prod2 <- str_trim(Groceries@itemInfo$labels)
dim(Groceries@data)
str(Groceries@data)
str(as.matrix(Groceries@data))
mtx <- t(as.matrix(Groceries@data))
head(mtx)
txn <- ldply(seq(nrow(mtx)), function(row){
d <- data.frame(id_transaction = row, prod = prods[mtx[row,]])
d <- subset(d, prod != "whole_milk")
}, .progress="text")
head(txn, 60)
write.table(txn, file="tscs.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
txn <- read.transactions(file="tscs.txt", rm.duplicates= FALSE, format="single",sep="\t", cols =c(1,2))
txn
str(txn)
itemFrequencyPlot(txn)
basket_rules <- apriori(txn,parameter = list(supp = 0.025, conf = 0.05, target = "rules"))
inspect(basket_rules)
rm(list=ls())
# install.packages("arules")
library(arules)
library(plyr)
library(stringr)
data(Groceries)
Groceries
str(Groceries)
prods <- as.character(gsub(" ", "_" , str_trim(Groceries@itemInfo$labels)))
prod2 <- str_trim(Groceries@itemInfo$labels)
dim(Groceries@data)
str(Groceries@data)
str(as.matrix(Groceries@data))
mtx <- t(as.matrix(Groceries@data))
head(mtx)
txn <- ldply(seq(nrow(mtx)), function(row){
d <- data.frame(id_transaction = row, prod = prods[mtx[row,]])
# d <- subset(d, prod != "whole_milk")
d
}, .progress="text")
head(txn, 60)
write.table(txn, file="tscs.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
txn <- read.transactions(file="tscs.txt", rm.duplicates= FALSE, format="single",sep="\t", cols =c(1,2))
txn
str(txn)
itemFrequencyPlot(txn)
basket_rules <- apriori(txn,parameter = list(supp = 0.025, conf = 0.05, target = "rules"))
# Check the generated rules using inspect
inspect(basket_rules)
write(basket_rules)
#If huge number of rules are generated specific rules can read using index
inspect(basket_rules[1]);
#To visualize the item frequency in txn file
itemFrequencyPlot(txn);
#To see how the transaction file is read into txn variable.
inspect(txn)
inspect(txn)
